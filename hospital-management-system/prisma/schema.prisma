// prisma/schema.prisma
// Extended schema with pharmacy-related models
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int              @id @default(autoincrement())
  email         String           @unique
  name          String
  password      String
  role          String           @default("PATIENT")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  doctor        Doctor?          @relation(fields: [doctorId], references: [id])
  doctorId      Int?             @unique
  patient       Patient?         @relation(fields: [patientId], references: [id])
  patientId     Int?             @unique
  payrolls      Payroll[]
  cssdLogs      CSSDLog[]        @relation("LoggedBy")
  cssdRequisitions CSSDRequisition[] @relation("RequisitionRequestedBy")
  appointments  Appointment[]    @relation("BookedBy")
  pharmacyLogs  PharmacyLog[]    @relation("LoggedBy")
}

model Doctor {
  id            Int         @id @default(autoincrement())
  user          User?       @relation
  doctorId      String      @unique
  specialty     String
  licenseNumber String      @unique
  phone         String?
  office        String?
  departmentId  Int?
  department    Department? @relation(fields: [departmentId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  admissions    Admission[] @relation("DoctorAdmissions")
  discharges    Discharge[] @relation("DischargingDoctor")
  appointments  Appointment[] @relation("DoctorAppointments")
  availability  DoctorAvailability[]
  prescriptions Prescription[] @relation("PrescribingDoctor")
}

model Patient {
  id                Int           @id @default(autoincrement())
  user              User?         @relation
  patientId         String        @unique
  dateOfBirth       DateTime?
  gender            String?
  phone             String?
  address           String?
  emergencyContact  String?
  emergencyContactPhone String?
  insuranceProvider String?
  insurancePolicy   String?
  bloodType         String?
  allergies         String?
  medicalHistory    String?
  admissions        Admission[]
  discharges        Discharge[]   @relation("DischargedPatient")
  transactions      Transaction[] @relation("PatientTransactions")
  appointments      Appointment[] @relation("PatientAppointments")
  prescriptions     Prescription[] @relation("PatientPrescriptions")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Department {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  doctors       Doctor[]
  appointments  Appointment[]
}

model Appointment {
  id            Int         @id @default(autoincrement())
  patientId     Int
  patient       Patient     @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId      Int
  doctor        Doctor      @relation("DoctorAppointments", fields: [doctorId], references: [id])
  departmentId  Int?
  department    Department? @relation(fields: [departmentId], references: [id])
  bookedById    Int?
  bookedBy      User?       @relation("BookedBy", fields: [bookedById], references: [id])
  date          DateTime
  status        String      @default("SCHEDULED")
  type          String      @default("REGULAR")
  reason        String
  notes         String?
  checkInTime   DateTime?
  checkOutTime  DateTime?
  reminderSent  Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  queue         Queue?
  prescriptions Prescription[]
}

model DoctorAvailability {
  id            Int         @id @default(autoincrement())
  doctorId      Int
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  startTime     DateTime
  endTime       DateTime
  status        String      @default("AVAILABLE")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Queue {
  id            Int         @id @default(autoincrement())
  appointmentId Int         @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  queueNumber   Int
  status        String      @default("WAITING")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Admission {
  id                Int       @id @default(autoincrement())
  patientId         Int
  patient           Patient   @relation(fields: [patientId], references: [id])
  doctorId          Int?
  doctor            Doctor?   @relation("DoctorAdmissions", fields: [doctorId], references: [id])
  wardId            Int?
  ward              Ward?     @relation(fields: [wardId], references: [id])
  admissionDate     DateTime  @default(now())
  scheduledDate     DateTime?
  preAdmissionNotes String?
  presentingComplaints String?
  relayedInfo       String?
  triagePriority    String?
  triageNotes       String?
  status            String    @default("PENDING")
  dischargeDate     DateTime?
  dischargeNotes    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  dispensedMedications DispensedMedication[] @relation("AdmissionDispensing")
}

model Discharge {
  id                Int       @id @default(autoincrement())
  patientId         Int
  patient           Patient   @relation("DischargedPatient", fields: [patientId], references: [id])
  doctorId          Int
  doctor            Doctor    @relation("DischargingDoctor", fields: [doctor à¶¸).  @updatedAt
  dischargeDate     DateTime  @default(now())
  dischargeNotes    String?
  followUpInstructions String?
  medications       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Ward {
  id            Int         @id @default(autoincrement())
  name          String
  wardNumber    String      @unique
  totalBeds     Int
  occupiedBeds  Int         @default(0)
  department    String?
  location      String?
  nurseInCharge String?
  admissions    Admission[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Transaction {
  id            Int          @id @default(autoincrement())
  description   String
  amount        Float
  category      String
  status        String
  date          DateTime     @default(now())
  type          String
  costCenterId  Int?
  costCenter    CostCenter?  @relation(fields: [costCenterId], references: [id])
  patientId     Int?
  patient       Patient?     @relation("PatientTransactions", fields: [patientId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Payroll {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  salary    Float
  taxes     Float
  benefits  Float
  period    String
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CostCenter {
  id            Int           @id @default(autoincrement())
  name          String
  department    String
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model FixedAsset {
  id            Int       @id @default(autoincrement())
  name          String
  purchaseDate  DateTime
  purchaseCost  Float
  depreciation  Float
  currentValue  Float
  status        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CSSDInstrument {
  id                 Int       @id @default(autoincrement())
  name               String
  serialNumber       String    @unique
  type               String?
  status             String    @default("AVAILABLE")
  lastSterilized     DateTime?
  location           String?
  stockQuantity      Int       @default(1)
  minStockThreshold  Int       @default(1)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  cssdRecords        CSSDRecord[]
  requisitions       CSSDRequisition[] @relation("RequisitionInstrument")
  logs               CSSDLog[]         @relation("InstrumentLogs")
}

model CSSDRecord {
  id                 Int       @id @default(autoincrement())
  instrumentId       Int
  instrument         CSSDInstrument @relation(fields: [instrumentId], references: [id])
  sterilizationDate   DateTime?
  sterilizationMethod String?
  cycleNumber        String?
  status             String    @default("PENDING")
  qualityCheck       String?
  notes              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  logs               CSSDLog[] @relation("RecordLogs")
}

model CSSDRequisition {
  id              Int       @id @default(autoincrement())
  instrumentId    Int
  instrument      CSSDInstrument @relation("RequisitionInstrument", fields: [instrumentId], references: [id])
  department      String
  requestedBy     Int
  user            User      @relation("RequisitionRequestedBy", fields: [requestedBy], references: [id])
  quantity        Int
  requestDate     DateTime  @default(now())
  dispatchDate    DateTime?
  status          String    @default("PENDING")
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  logs            CSSDLog[] @relation("RequisitionLogs")
}

model CSSDLog {
  id              Int            @id @default(autoincrement())
  instrumentId    Int?
  instrument      CSSDInstrument? @relation("InstrumentLogs", fields: [instrumentId], references: [id])
  recordId        Int?
  record          CSSDRecord?    @relation("RecordLogs", fields: [recordId], references: [id])
  requisitionId   Int?
  requisition     CSSDRequisition? @relation("RequisitionLogs", fields: [requisitionId], references: [id])
  userId          Int
  user            User           @relation("LoggedBy", fields: [userId], references: [id])
  action          String
  details         String?
  createdAt       DateTime       @default(now())
}

model Medication {
  id                Int       @id @default(autoincrement())
  name              String
  genericName       String?
  category          String
  description       String?
  dosageForm        String
  strength          String?
  batchNumber       String
  barcode           String?   @unique
  rfid              String?   @unique
  stockQuantity     Int       @default(0)
  minStockThreshold Int       @default(10)
  price             Float
  expiryDate        DateTime
  isNarcotic        Boolean   @default(false)
  storageConditions String?
  manufacturer      String?
  formulary         Formulary? @relation(fields: [formularyId], references: [id])
  formularyId       Int?
  supplier          Supplier?  @relation(fields: [supplierId], references: [id])
  supplierId        Int?
  prescriptions     PrescriptionMedication[]
  dispensedMedications DispensedMedication[]
  purchaseOrderItems PurchaseOrderItem[]
  stockAdjustments  StockAdjustment[]
  pharmacyLogs      PharmacyLog[] @relation("MedicationLogs")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Formulary {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  medications   Medication[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Supplier {
  id            Int         @id @default(autoincrement())
  name          String
  contact       String?
  email         String?
  address       String?
  medications   Medication[]
  purchaseOrders PurchaseOrder[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Prescription {
  id                Int         @id @default(autoincrement())
  patientId         Int
  patient           Patient     @relation("PatientPrescriptions", fields: [patientId], references: [id])
  doctorId          Int
  doctor            Doctor      @relation("PrescribingDoctor", fields: [doctorId], references: [id])
  appointmentId     Int?
  appointment       Appointment? @relation(fields: [appointmentId], references: [id])
  date              DateTime    @default(now())
  status            String      @default("PENDING")
  notes             String?
  medications       PrescriptionMedication[]
  dispensedMedications DispensedMedication[] @relation("PrescriptionDispensing")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model PrescriptionMedication {
  id                Int         @id @default(autoincrement())
  prescriptionId    Int
  prescription      Prescription @relation(fields: [prescriptionId], references: [id])
  medicationId      Int
  medication        Medication   @relation(fields: [medicationId], references: [id])
  dosage            String
  frequency         String
  duration          String
  quantity          Int
  instructions      String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model DispensedMedication {
  id                Int         @id @default(autoincrement())
  prescriptionId    Int?
  prescription      Prescription? @relation("PrescriptionDispensing", fields: [prescriptionId], references: [id])
  medicationId      Int
  medication        Medication   @relation(fields: [medicationId], references: [id])
  patientId         Int
  patient           Patient      @relation(fields: [patientId], references: [id])
  admissionId       Int?
  admission         Admission?   @relation("AdmissionDispensing", fields: [admissionId], references: [id])
  quantity          Int
  dispenseDate      DateTime    @default(now())
  type              String      @default("OUTPATIENT")
  status            String      @default("DISPENSED")
  invoiceId         Int?
  invoice           PharmacyInvoice? @relation(fields: [invoiceId], references: [id])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model PharmacyInvoice {
  id                Int         @id @default(autoincrement())
  patientId         Int
  patient           Patient      @relation(fields: [patientId], references: [id])
  totalAmount       Float
  status            String      @default("PENDING")
  date              DateTime    @default(now())
  paymentMethod     String?
  transactionId     Int?
  transaction       Transaction? @relation(fields: [transactionId], references: [id])
  dispensedMedications DispensedMedication[]
  refunds           PharmacyRefund[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model PharmacyRefund {
  id                Int         @id @default(autoincrement())
  invoiceId         Int
  invoice           PharmacyInvoice @relation(fields: [invoiceId], references: [id])
  reason            String
  amount            Float
  date              DateTime    @default(now())
  status            String      @default("PENDING")
  transactionId     Int?
  transaction       Transaction? @relation(fields: [transactionId], references: [id])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model PurchaseOrder {
  id                Int         @id @default(autoincrement())
  supplierId        Int
  supplier          Supplier     @relation(fields: [supplierId], references: [id])
  orderDate         DateTime    @default(now())
  expectedDelivery  DateTime?
  status            String      @default("PENDING")
  totalAmount       Float       @default(0)
  items             PurchaseOrderItem[]
  pharmacyLogs      PharmacyLog[] @relation("PurchaseOrderLogs")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model PurchaseOrderItem {
  id                Int         @id @default(autoincrement())
  purchaseOrderId   Int
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  medicationId      Int
  medication        Medication   @relation(fields: [medicationId], references: [id])
  quantity          Int
  unitPrice         Float
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model StockAdjustment {
  id                Int         @id @default(autoincrement())
  medicationId      Int
  medication        Medication   @relation(fields: [medicationId], references: [id])
  quantity          Int
  reason            String
  adjustmentDate    DateTime    @default(now())
  type              String      @default("ADJUSTMENT")
  userId            Int
  user              User        @relation(fields: [userId], references: [id])
  pharmacyLogs      PharmacyLog[] @relation("StockAdjustmentLogs")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model PharmacyLog {
  id                Int         @id @default(autoincrement())
  medicationId      Int?
  medication        Medication?  @relation("MedicationLogs", fields: [medicationId], references: [id])
  purchaseOrderId   Int?
  purchaseOrder     PurchaseOrder? @relation("PurchaseOrderLogs", fields: [purchaseOrderId], references: [id])
  stockAdjustmentId Int?
  stockAdjustment   StockAdjustment? @relation("StockAdjustmentLogs", fields: [stockAdjustmentId], references: [id])
  userId            Int
  user              User        @relation("LoggedBy", fields: [userId], references: [id])
  action            String
  details           String?
  createdAt         DateTime    @default(now())
}